====== GIT 설치 및 사용법 익히기 내용정리 =====

from Youtube "Git으로 시작하는 협업 및 오픈소스 프로젝트" 
uploaded in Dec 2019=8 by 동빈나

1강.
Git: 분산형 협업도구 
GIT 가입과 설치
1. Git Hub sign-up
2. Create a new repository
3. Git SOFTWARE 다운로드 http://git-scm.com/download/win

> git
> git--version
> git config --global user.name sooish
> git config --global user.email sooish@gmail.com
> cd 업로드할 파일이 저장된 폴더의 디렉토리 입력
> git clone http://---- git hub 저장소 주소 치기
> 폴더 안에 git 저장소가 생김(로컬 repository) - remote repository(git hub)
> cd 저장소 이름 치기 (그 안으로 이동)
> git add 파일이름
> git commit -m ""
> git push

2강.
오픈소스 활동, contribution 활동
committer 
오픈소스 라이센스 : MIT License, Apache License,GPL...

3강.
여러사람과 관리해서 협업가능
하나의 소스코드를 여러명이 동시에 보면서 병렬적으로 소스코드 수정 가능
중앙서버없이 분산형으로 관리
분산적 개발, 효율적 개발, 비선형적 개발(branch, 트리구조 사용).


4강.
깃프로젝트에 담겨있는 데이터들은 파일 시스템 상에서의 스샷 같은 것. 수정 내역 자체를 저장

GIT 프로젝트의 구성요소:
Working directory - 작업할 파일이 있는 디렉토리
Staging Area 커밋을 수행할 파일들이 올라가는 영역
Git Directory Git 프로젝트의 메타 데이터와 데이터 정보가 저장되는 디렉토리

working directory - git add -> staging area -git commit -> Local Repository 
-git push -> Remote Repository 

Working Diretory <- git merge - Local Repository <- git fetch - Remote Repository 
or Working Directory < -  git pull(git fetch와 git merge를 한번에) -  Remote Repository 

저장소(repo)는 실제 소스코드가 담겨 있으면서 커밋내역 등의 모든 작업 이력이 담겨 있는 공간
환경설정과 관련한 폴더. 각종 데이터와 해시 값 등이 담김


5강. 소스코드 수정하여 프로젝트 반영하기
 
 1) 해당 프로젝트에 소속된 사람이 아닌 경우(오픈소스)
    pull request(PR)을 작성하여 오픈소스에 기여할 수 있음
 
 2) 해당 프로젝트에 소속된 사람인 경우
	commit -> push
	>git clone git url 복사
	>dir 해당폴더 확인
	>해당폴더로 이동
	>dir 업로드할 파일 학인
	>git status 특정파일 확인
	>git add 특정파일
	>git status: staging area에 올라가 있는 것 확인가능
	>git reset : 특정 파일 내리는 기능
	>git add. : 모든 수정 내역 반영됨
	>git commit -m ""
	>git push
	
    >git checkout -- 파일명 : 수정사항 복원
	>git commit --amend : 커밋 수정사항
	
6장. 커밋내용 수정하기

git log 그동안 작업한 내역 확인
계속 이어지는 로그에서 나오려면 'q'입력
각각의 commit은 hash값으로 할당돼 있음

작업 이전으로 돌아가려면 git reset--hard 해시값
그 해시값 이후의 작업들 다 지우겠다는 것
local 저장소는 이전으로 돌아가 있으나 remote 저장소는 예전 그대로
두개의 저장소의 구성이 달라졌으므로 push 해서는 안됨
git push-f

commmit 메세지 수정방법 
git commit --amend 
유닉스 에디터로 들어감. A 누르면 insert, 수정하고 esc + : WQ!
수정되고 밖으로 나온다
 
7장. 브랜치 사용방법
여러개발자들이 동시에 프로젝트 수행하여 각기 다른 기능을 개발할 수 있게 하는 기능
통합브랜치(master branch) : 배포가능한 안정화된 브랜치
토픽브랜치(topic branch) : 특정한 기능 위해 만들어진 브랜치. Develop Branch, Bug Fix Branch 등
Master Branch --> 
			 --> Develop Branch -> merge
			 --> Bug Fix Branch -> merge
			 
따라서 master branch는 언제나 안정화된 상태

git brach 
git branch develop
git branch
git checkout develop
git add . 
git commit -m""
git log(git hub에는 아직 반영이 안된 상태)

11장. Git Archive
- 깃 아카이브란, 깃프로젝트에서 소스 코드만 추출하고 싶을때 사용 명령어
- 프로젝트 소스 코드 간단히 다운로드 받아서 사용하는 입장에서 사용가능
- 깃 프로젝트에서 .git 폴더 제외 다른 소스코드 내용만 압축파일 형태로 제공하자 할때 사용가능
>cd 
>git archive --format:zip master(추출할 브랜치) -o(아웃풋 설정. 어떤 파일로 추출될건지 적어주는 것) Master.zip
실제 압축폴더 열면 깃 프로젝트 파일은 전혀 포함되어 있지 않고, 소스코드에 해당하는 파일들만 들어가 있음

>git archive --format:zip master(추출할 브랜치) -o(아웃풋 설정. 어떤 파일로 추출될건지 적어주는 것) ../Master.zip
깃 프로젝트의 상위 폴더에 해당 압축파일 내보낼 수도 있음.

9장. 





